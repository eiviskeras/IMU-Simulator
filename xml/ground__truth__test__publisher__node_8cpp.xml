<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ground__truth__test__publisher__node_8cpp" kind="file" language="C++">
    <compoundname>ground_truth_test_publisher_node.cpp</compoundname>
    <includes local="no">Eigen/Dense</includes>
    <includes local="no">cmath</includes>
    <includes local="yes">rclcpp/rclcpp.hpp</includes>
    <includes local="yes">geometry_msgs/msg/accel_stamped.hpp</includes>
    <includes local="yes">geometry_msgs/msg/point.hpp</includes>
    <includes local="yes">geometry_msgs/msg/pose.hpp</includes>
    <includes local="yes">geometry_msgs/msg/quaternion.hpp</includes>
    <includes local="yes">geometry_msgs/msg/transform_stamped.hpp</includes>
    <includes local="yes">geometry_msgs/msg/twist.hpp</includes>
    <includes local="yes">nav_msgs/msg/odometry.hpp</includes>
    <includes local="yes">tf2_ros/transform_broadcaster.h</includes>
    <incdepgraph>
      <node id="10">
        <label>geometry_msgs/msg/twist.hpp</label>
      </node>
      <node id="11">
        <label>nav_msgs/msg/odometry.hpp</label>
      </node>
      <node id="7">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="9">
        <label>geometry_msgs/msg/transform_stamped.hpp</label>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>geometry_msgs/msg/accel_stamped.hpp</label>
      </node>
      <node id="4">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="2">
        <label>Eigen/Dense</label>
      </node>
      <node id="6">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="12">
        <label>tf2_ros/transform_broadcaster.h</label>
      </node>
      <node id="8">
        <label>geometry_msgs/msg/quaternion.hpp</label>
      </node>
      <node id="1">
        <label>/__w/IMU-Simulator/IMU-Simulator/src/ground_truth_test_publisher_node.cpp</label>
        <link refid="ground__truth__test__publisher__node_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_ground_truth_publisher" prot="public">GroundTruthPublisher</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="ground__truth__test__publisher__node_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/IMU-Simulator/IMU-Simulator/src/ground_truth_test_publisher_node.cpp" line="195" column="5" bodyfile="/__w/IMU-Simulator/IMU-Simulator/src/ground_truth_test_publisher_node.cpp" bodystart="195" bodyend="201"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*@license<sp/>BSD-3<sp/>https://opensource.org/licenses/BSD-3-Clause</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2024,<sp/>Institute<sp/>of<sp/>Automatic<sp/>Control<sp/>-<sp/>RWTH<sp/>Aachen<sp/>University</highlight></codeline>
<codeline lineno="3"><highlight class="comment">Maximilian<sp/>Nitsch<sp/>(m.nitsch@irt.rwth-aachen.de)</highlight></codeline>
<codeline lineno="4"><highlight class="comment">All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rclcpp/rclcpp.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;geometry_msgs/msg/accel_stamped.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;geometry_msgs/msg/point.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;geometry_msgs/msg/pose.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;geometry_msgs/msg/quaternion.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;geometry_msgs/msg/transform_stamped.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;geometry_msgs/msg/twist.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nav_msgs/msg/odometry.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tf2_ros/transform_broadcaster.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="class_ground_truth_publisher" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_ground_truth_publisher" kindref="compound">GroundTruthPublisher</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>rclcpp::Node<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="class_ground_truth_publisher_1a728139ea62430c3bf203637253d8d9d4" kindref="member">GroundTruthPublisher</ref>()<sp/>:<sp/>Node(</highlight><highlight class="stringliteral">&quot;ground_truth_publisher&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>odomPublisher_<sp/>=<sp/>this-&gt;create_publisher&lt;nav_msgs::msg::Odometry&gt;(</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/nanoauv/odometry&quot;</highlight><highlight class="normal">,<sp/>10);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>accelPublisher_<sp/>=<sp/>this-&gt;create_publisher&lt;geometry_msgs::msg::AccelStamped&gt;(</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/nanoauv/accel&quot;</highlight><highlight class="normal">,<sp/>10);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>value<sp/>of<sp/>the<sp/>odom_rate<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;declare_parameter(</highlight><highlight class="stringliteral">&quot;odom_rate&quot;</highlight><highlight class="normal">,<sp/>rclcpp::PARAMETER_DOUBLE);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>rate_<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;odom_rate&quot;</highlight><highlight class="normal">).as_double();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>value<sp/>of<sp/>the<sp/>odom_rate<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Odometry<sp/>rate:<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>rate_);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>timer<sp/>to<sp/>publish<sp/>the<sp/>odometry<sp/>message<sp/>at<sp/>user-defined<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>timer_<sp/>=<sp/>this-&gt;create_wall_timer(</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double&gt;(1.0<sp/>/<sp/>rate_),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;GroundTruthPublisher::publishMsgs,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>tf2Broadcaster_<sp/>=<sp/>std::make_shared&lt;tf2_ros::TransformBroadcaster&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>time_since_start_<sp/>=<sp/>this-&gt;now().seconds();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>ground<sp/>truth<sp/>messages<sp/>and<sp/>tf2<sp/>transform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>publishMsgs()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>current<sp/>time<sp/>in<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time_seconds<sp/>=<sp/>this-&gt;now().seconds()<sp/>-<sp/>time_since_start_;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>odometry<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>nav_msgs::msg::Odometry<sp/>odometryMsg;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Populate<sp/>odometry<sp/>header<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.header.stamp<sp/>=<sp/>this-&gt;now();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.header.frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.child_frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;base_link&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Populate<sp/>odometry<sp/>pose<sp/>message<sp/>with<sp/>sine/cosine<sp/>signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.pose.pose.position.x<sp/>=</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>325<sp/>*<sp/>std::sin(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.0002);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.pose.pose.position.y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>20.0<sp/>*<sp/>std::cos(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.02);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.pose.pose.position.z<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5.0<sp/>*<sp/>std::sin(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.03);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Euler<sp/>angles<sp/>from<sp/>sine/cosine<sp/>signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>roll<sp/>=<sp/>120<sp/>*<sp/>M_PI<sp/>/<sp/>180.0<sp/>*<sp/>std::sin(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.01);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pitch<sp/>=<sp/>75<sp/>*<sp/>M_PI<sp/>/<sp/>180.0<sp/>*<sp/>std::cos(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.02);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw<sp/>=<sp/>170<sp/>*<sp/>M_PI<sp/>/<sp/>180.0<sp/>*<sp/>std::sin(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.03);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>sensorRotationEulerRpy(roll,<sp/>pitch,<sp/>yaw);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>Euler<sp/>angles<sp/>to<sp/>rotation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>sensorRotation;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sensorRotation<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(sensorRotationEulerRpy(0),<sp/>Eigen::Vector3d::UnitZ())<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(sensorRotationEulerRpy(1),<sp/>Eigen::Vector3d::UnitY())<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(sensorRotationEulerRpy(2),<sp/>Eigen::Vector3d::UnitX());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sensorRotation<sp/>=<sp/>Eigen::AngleAxisd(0.0,<sp/>Eigen::Vector3d::UnitZ())<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(0.0,<sp/>Eigen::Vector3d::UnitY())<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(0.0,<sp/>Eigen::Vector3d::UnitX());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Convert<sp/>rotation<sp/>matrix<sp/>to<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eigen::Quaterniond<sp/>sensorRotationQuat<sp/>=<sp/>Eigen::Quaterniond(sensorRotation);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Normalize<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sensorRotationQuat.normalize();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>sensorRotationQuat<sp/>=</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Quaterniond(0.0,<sp/>1.0,<sp/>0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.pose.pose.orientation.w<sp/>=<sp/>sensorRotationQuat.w();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.pose.pose.orientation.x<sp/>=<sp/>sensorRotationQuat.x();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.pose.pose.orientation.y<sp/>=<sp/>sensorRotationQuat.y();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.pose.pose.orientation.z<sp/>=<sp/>sensorRotationQuat.z();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>odometryMsg.pose.pose.orientation.w<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>odometryMsg.pose.pose.orientation.x<sp/>=<sp/>1.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>odometryMsg.pose.pose.orientation.y<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>odometryMsg.pose.pose.orientation.z<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Populate<sp/>odometry<sp/>twist<sp/>message<sp/>with<sp/>sine/cosine<sp/>signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.twist.twist.linear.x<sp/>=</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.25<sp/>*<sp/>std::cos(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.01);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.twist.twist.linear.y<sp/>=</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.01<sp/>*<sp/>std::sin(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.02);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.twist.twist.linear.z<sp/>=</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.02<sp/>*<sp/>std::cos(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.03);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.twist.twist.angular.x<sp/>=</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>*<sp/>std::cos(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.01);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.twist.twist.angular.y<sp/>=</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>std::sin(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.02);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>odometryMsg.twist.twist.angular.z<sp/>=</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5<sp/>*<sp/>std::cos(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.03);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>odometry<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>odomPublisher_-&gt;publish(odometryMsg);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>acceleration<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::AccelStamped<sp/>accelMsg;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>accelMsg.header.stamp<sp/>=<sp/>this-&gt;now();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>accelMsg.header.frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;base_link&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>C_b_n<sp/>=<sp/>sensorRotationQuat.toRotationMatrix();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>C_n_b<sp/>=<sp/>C_b_n.transpose();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eigen::Vector3d<sp/>a_ib_b(2.5<sp/>*<sp/>std::cos(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.01),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>*<sp/>std::sin(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.02),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>*<sp/>std::cos(2<sp/>*<sp/>M_PI<sp/>*<sp/>time_seconds<sp/>*<sp/>0.03));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>f_ib_b(2.0,<sp/>0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>a_ib_b<sp/>=<sp/>f_ib_b<sp/>+<sp/>C_n_b<sp/>*<sp/>Eigen::Vector3d(0.0,<sp/>0.0,<sp/>-9.81);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Transform<sp/>acceleration<sp/>to<sp/>world<sp/>frame<sp/>to<sp/>consider<sp/>orientation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eigen::Matrix3d<sp/>C_b_n<sp/>=<sp/>sensorRotationQuat.toRotationMatrix();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eigen::Vector3d<sp/>accelerationWorld<sp/>=<sp/>C_b_n<sp/>*<sp/>acceleration;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>accelMsg.accel.linear.x<sp/>=<sp/>a_ib_b(0);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>accelMsg.accel.linear.y<sp/>=<sp/>a_ib_b(1);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>accelMsg.accel.linear.z<sp/>=<sp/>a_ib_b(2);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>accelMsg.accel.angular.x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>accelMsg.accel.angular.y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>accelMsg.accel.angular.z<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>acceleration<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>accelPublisher_-&gt;publish(accelMsg);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::TransformStamped<sp/>tfMsg;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>tfMsg.header.stamp<sp/>=<sp/>now();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>tfMsg.header.frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>tfMsg.child_frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;base_link&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>tfMsg.transform.translation.x<sp/>=<sp/>odometryMsg.pose.pose.position.x;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>tfMsg.transform.translation.y<sp/>=<sp/>odometryMsg.pose.pose.position.y;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>tfMsg.transform.translation.z<sp/>=<sp/>odometryMsg.pose.pose.position.z;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>tfMsg.transform.rotation.w<sp/>=<sp/>odometryMsg.pose.pose.orientation.w;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>tfMsg.transform.rotation.x<sp/>=<sp/>odometryMsg.pose.pose.orientation.x;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>tfMsg.transform.rotation.y<sp/>=<sp/>odometryMsg.pose.pose.orientation.y;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>tfMsg.transform.rotation.z<sp/>=<sp/>odometryMsg.pose.pose.orientation.z;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>tf2Broadcaster_-&gt;sendTransform(tfMsg);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Odometry<sp/>publisher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>rclcpp::Publisher&lt;nav_msgs::msg::Odometry&gt;::SharedPtr<sp/>odomPublisher_;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Acceleration<sp/>publisher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>rclcpp::Publisher&lt;geometry_msgs::msg::AccelStamped&gt;::SharedPtr</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accelPublisher_;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Publisher<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>rclcpp::TimerBase::SharedPtr<sp/>timer_;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>rclcpp::TimerBase::SharedPtr<sp/>timerTf2Broadcaster_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;tf2_ros::TransformBroadcaster&gt;<sp/>tf2Broadcaster_;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rate<sp/>of<sp/>ground<sp/>truth<sp/>message<sp/>publication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rate_;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>since<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time_since_start_;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ground__truth__test__publisher__node_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>rclcpp::init(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ground_truth_publisher<sp/>=<sp/>std::make_shared&lt;GroundTruthPublisher&gt;();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>rclcpp::spin(ground_truth_publisher);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>rclcpp::shutdown();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/__w/IMU-Simulator/IMU-Simulator/src/ground_truth_test_publisher_node.cpp"/>
  </compounddef>
</doxygen>
